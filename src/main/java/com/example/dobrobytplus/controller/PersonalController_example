package com.example.dobrobytplus.controller;

import com.example.dobrobytplus.dto.AccountsDto;
import com.example.dobrobytplus.dto.CurrentTransactionsDto;
import com.example.dobrobytplus.dto.DispositionsDto;
import com.example.dobrobytplus.dto.PermissionsDto;
import com.example.dobrobytplus.entities.AccountTypes;
import com.example.dobrobytplus.entities.Accounts;
import com.example.dobrobytplus.entities.Users;
import com.example.dobrobytplus.exceptions.UserHasNoAccess;
import com.example.dobrobytplus.security.MyUsersPrincipal;
import com.example.dobrobytplus.service.AccountsService;
import com.example.dobrobytplus.service.CurrentTransactionsService;
import com.example.dobrobytplus.service.DispositionsService;
import com.example.dobrobytplus.service.PermissionsService;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpServletRequest;
import java.sql.Date;
import java.time.LocalTime;
import java.util.List;

@Controller
@AllArgsConstructor
public class PersonalController_example {

    @Autowired
    private final AccountsService accountsService;
    @Autowired
    private final PermissionsService permissionsService;
    @Autowired
    private final CurrentTransactionsService currentTransactionsService;
    @Autowired
    private final DispositionsService dispositionsService;

    //    @GetMapping
    @RequestMapping({"/personal"})
    public String viewPersonalPage(Model modelMap) {
        // jesli uzytkownik nie ma uprawnien, to wyrzucamy go na strone z bledem
        Long idAccount = (Long) modelMap.getAttribute("idAccount");
        if (!permissionsService.doesCurrentUserHaveAccessToAccount(idAccount)) {
            throw new UserHasNoAccess();
        }

        // typ rachunku i rola uzytkownika do wyswietlenia na stronie
        String accountType = accountsService.getAccountType(idAccount);
        String userRole = permissionsService.currentUserRoleInAccount(idAccount);


        // dostajesz tutaj liste autoDispositions
        // zaden z uzytkownikow nie moze niczego usunac

        List<AutoDispositionsDto> autoDispositions = autoDispositionsService.getAutoDispositions(idAccount);
        // podsumowanie
        Double saldoAutoDispositionPLN = autoDispositionsService.sumDispositionsPLN(idAccount);
        Double saldoAutoDispositionMikroSasin = autoDispositionsService.plnToMikrosasin(saldoAutoDispositionPLN);

        // dostajesz tutaj liste dispositions
        // i liste Boolean, czy uzytkownik moze miec aktywny przycisk usun
        // iteracje po dwoch listach mozna zrobic tak
        // https://stackoverflow.com/questions/43183709/how-to-iterate-simultaneously-over-two-lists-using-thymeleaf
        List<DispositionsDto> dispositions = dispositionsService.getDispositions(idAccount);
        List<Boolean> canUserDeleteDisposition = dispositionsService.canUserDelete(idAccount, dispositions);
        // podsumowanie
        Double saldoDispositionPLN = dispositionsService.sumDispositionsPLN(idAccount);
        Double saldoDispositionMikroSasin = dispositionsService.plnToMikrosasin(saldoDispositionPLN);

        // potem bedzie przycisk "dodaj dyspozycje"


        // dostajesz tutaj liste current transactions
        // i liste Boolean, czy uzytkownik moze miec aktywny przycisk usun
        // iteracje po dwoch listach mozna zrobic tak
        // https://stackoverflow.com/questions/43183709/how-to-iterate-simultaneously-over-two-lists-using-thymeleaf
        List<CurrentTransactionsDto> currentTransactions = currentTransactionsService.getCurrentTransactions(idAccount);
        List<Boolean> canUserDeleteCurrentTransaction = currentTransactionsService.canUserDelete(idAccount, currentTransactions);
        // podsumowanie
        Double saldoCurrentPLN = currentTransactionsService.sumCurrentTransactionsPLN(idAccount);
        Double saldoCurrentMikroSasin = currentTransactionsService.plnToMikrosasin(saldoCurrentPLN);

        // potem bedzie przycisk "dodaj biezaca transakcje"



        return "personal";
    }


    @PostMapping
    public String addCurrentTransaction(Double value, String description, Long idAccount,HttpServletRequest request, Errors errors) {
        Date time =  Date.valueOf(LocalTime.now().toString());
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String username =  ((MyUsersPrincipal) principal).getUsername();
        CurrentTransactionsDto currentTransactionsDto = new CurrentTransactionsDto(value,time,description,idAccount,username);
        currentTransactionsService.saveCurrentTransaction(currentTransactionsDto);
        return "redirect:/personal";
    }


    @PostMapping
    public String addDisposition(Double value, String description, Long idAccount,HttpServletRequest request, Errors errors) {
        Date time =  Date.valueOf(LocalTime.now().toString());
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String username =  ((MyUsersPrincipal) principal).getUsername();
        DispositionsDto dispositionsDto = new DispositionsDto(value,time,description,idAccount,username);
        dispositionsService.saveDisposition(dispositionsDto);
        return "redirect:/personal";
    }




}